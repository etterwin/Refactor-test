// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var CITIES, COUNTRIES, Controller, GeoListController, Model, REGIONS, View, doc, dom, events, glob, http, lpjl, utils, _ref,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	lpjl = this.LPJL || utils.error('Ошибка: Подключите библиотеку LPJL.');

	/*
	module = lpjl.createClass(
		(el, onSelect, defCountry, nopos) ->
			contr = new Controller(el, onSelect, defCountry, nopos)
			contr
		,
		"name": "XCityList"
		"version": "0.1"
		"description": "Модуль выбора города для регистрации."
	)
	*/


	glob = this;

	doc = this.document;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	http = lpjl.use("http");

	COUNTRIES = 1;

	REGIONS = 3;

	CITIES = 5;

	Model = (function() {
		function Model() {
			this.countries = [];
			this.regions = [];
			this.cities = [];
			true;
		}

		Model.prototype.reqTypes = {
			"countries": COUNTRIES,
			"regions": REGIONS,
			"cities": CITIES
		};

		Model.prototype.get = function(type, args, ready) {
			var url;
			if (!type) {
				type = "countries";
			}
			url = "/api/a-geo/type-" + this.reqTypes[type];
			switch (type) {
				case "regions":
					url += "/country-" + args["country"];
					break;
				case "cities":
					url += "/country-" + args["country"] + "/region-" + args["region"];
			}
			return http.getJSON(url, events.proxy(function(res, type, ready) {
				var city, country, errno, region, result, _i, _j, _k, _len, _len1, _len2;
				result = res.geo;
				errno = res.errno;
				if (errno) {
					return false;
				}
				switch (type) {
					case COUNTRIES:
						this.countries = [];
						for (_i = 0, _len = result.length; _i < _len; _i++) {
							country = result[_i];
							this.countries.push({
								name: country.name,
								code: country.code
							});
						}
						if (ready) {
							return ready(this.countries);
						}
						break;
					case REGIONS:
						this.regions = [];
						for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
							region = result[_j];
							this.regions.push({
								name: region.name,
								code: region.code
							});
						}
						if (ready) {
							return ready(this.regions);
						}
						break;
					case CITIES:
						this.cities = [];
						for (_k = 0, _len2 = result.length; _k < _len2; _k++) {
							city = result[_k];
							this.cities.push({
								name: city.name,
								code: city.code
							});
						}
						if (ready) {
							return ready(this.cities);
						}
				}
			}, this, this.reqTypes[type], ready));
		};

		return Model;

	})();

	View = (function() {
		function View(el, nopos) {
			this.panels = [];
			this.current = 0;
			this.container = doc.createElement("div");
			this.nopos = nopos;
			dom.addClass(this.container, "xpopup-tab-container");
			dom.insertAfter(el, this.container);
		}

		View.prototype.renderPanel = function(arr, idx, onSelect) {
			var btn, btntxt, el, item, left, list, panel, scrollLeft, scrollTop, top, winHeight, winWidth, _i, _len;
			if (this.panels[idx]) {
				dom.removeChildren(this.panels[idx]);
			}
			panel = doc.createElement("div");
			dom.addClass(panel, "xpopup-tab");
			if (arr.length > 0) {
				list = doc.createElement("ul");
				for (_i = 0, _len = arr.length; _i < _len; _i++) {
					el = arr[_i];
					item = doc.createElement("li");
					item.setAttribute("data-value", el.code);
					item.innerHTML = el.name;
					list.appendChild(item);
				}
			}
			if (!this.nopos) {
				scrollTop = window.pageYOffset || document.documentElement.scrollTop;
				scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
				winWidth = glob.innerWidth || doc.documentElement.clientWidth;
				winHeight = glob.innerHeight || doc.documentElement.clientHeight;
				left = winWidth / 2 - this.container.offsetWidth / 2 + scrollLeft;
				top = winHeight / 2 - 100 + scrollTop;
				this.container.style.left = parseInt(left) + "px";
				this.container.style.top = parseInt(top) + "px";
			}
			panel.appendChild(list);
			if (idx >= 0) {
				btn = doc.createElement("a");
				if (idx === 0 || idx === 2) {
					btntxt = lng("Вернуться к списку областей");
				}
				if (idx === 1) {
					btntxt = lng("Вернуться к списку стран");
				}

				btn.innerHTML = btntxt;
				panel.appendChild(btn);
				if (idx === 0) {
					dom.addClass(btn, 'frwrd');
				}
				events.addListener("click", btn, events.proxy(function(e, id) {
					var toId;
					toId = id > 0 ? id - 1 : id + 1;
					return this.showPanel(toId);
				}, this, idx));
			}
			events.addListener("click", panel, events.proxy(this.onPanelClick, this, onSelect));
			this.panels[idx] = panel;
			this.container.appendChild(panel);
			return this.showPanel(idx);
		};

		View.prototype.showPanel = function(idx) {
			var cur;
			if (idx < 3) {
				cur = this.panels[this.current];
				if (cur) {
					dom.removeClass(cur, "active");
				}
				dom.addClass(this.panels[idx], "active");
				return this.current = idx;
			}
		};

		View.prototype.hidePanel = function(idx, c) {
			var cur;
			if (idx < 3) {
				cur = this.panels[this.current];
				if (cur) {
					dom.removeClass(cur, "active");
				}
				return this.current = c;
			}
		};

		View.prototype.onPanelClick = function(e, cb) {
			var el, name, value;
			el = e.target || e.srcElement;
			value = el.getAttribute("data-value");
			name = el.innerHTML;
			if (value) {
				return cb({
					value: value,
					name: name
				});
			}
		};

		View.prototype.hide = function() {
			return this.container.style.display = 'none';
		};

		View.prototype.show = function() {
			return this.container.style.display = 'block';
		};

		View.prototype.destroy = function() {
			return this.container.parentNode.removeChild(this.container);
		};

		return View;

	})();

	Controller = (function() {
		function Controller(el, onSelect, defCountry, nopos) {
			this.onSelect = onSelect;
			this.country = null;
			this.model = new Model();
			this.first = true;
			this.defCountry = defCountry;
			this.eve = (function(ctx) {
				return function(e) {
					return ctx.onOuterClick.call(ctx, e || event);
				};
			})(this);
			this.view = new View(el, nopos);
			null;
		}

		Controller.prototype.hide = function() {
			this.view.hide();
			return events.removeListener(doc, "click", this.eve);
		};

		Controller.prototype.extShow = function() {
			if (this.first) {
				this.first = false;
				this.model.get("countries", {}, events.proxy(this.onGetCountries, this));
				if (this.defCountry) {
					this.country = this.defCountry;
					return this.model.get("regions", {
						country: this.country.value
					}, events.proxy(function(regions) {
						this.onGetRegions(regions);
						return this.show();
					}, this));
				}
			} else {
				return this.show();
			}
		};

		Controller.prototype.show = function() {
			this.view.show();
			return glob.setTimeout(events.proxy(function() {
				return events.addListener("click", doc, this.eve);
			}, this), 100);
		};

		Controller.prototype.onGetCountries = function(countries) {
			this.view.renderPanel(countries, 0, events.proxy(function(country) {
				this.country = country;
				return this.model.get("regions", {
					country: this.country.value
				}, events.proxy(this.onGetRegions, this));
			}, this));
			this.view.hidePanel(0, 1);
			return this.view.showPanel(1);
		};

		Controller.prototype.onGetRegions = function(regions) {
			return this.view.renderPanel(regions, 1, events.proxy(function(region) {
				this.region = region;
				return this.model.get("cities", {
					country: this.country.value,
					region: this.region.value
				}, events.proxy(this.onGetCities, this));
			}, this));
		};

		Controller.prototype.onGetCities = function(cities) {
			return this.view.renderPanel(cities, 2, events.proxy(function(city) {
				this.city = city;
				this.city.name = this.city.name + ", " + this.country.name;
				this.hide();
				if (this.onSelect) {
					return this.onSelect(this.city);
				}
			}, this));
		};

		Controller.prototype.onOuterClick = function(e) {
			var el;
			el = e.target || e.srcElement;
			if (!dom.isChild(el, this.view.container)) {
				this.hide();
				return this.view.showPanel(1);
			}
		};

		return Controller;

	})();

	lpjl.XCityList = Controller;

	GeoListController = (function(_super) {
		__extends(GeoListController, _super);

		function GeoListController() {
			_ref = GeoListController.__super__.constructor.apply(this, arguments);
			return _ref;
		}

		GeoListController.prototype.onGetCities = function(cities) {
			return this.view.renderPanel(cities, 2, events.proxy(function(city) {
				var result;
				this.city = city;
				result = {
					value: "" + this.country.value + "," + this.region.value + "," + this.city.value,
					name: "" + this.city.name + ", " + this.country.name
				};
				this.hide();
				if (this.onSelect) {
					return this.onSelect(result);
				}
			}, this));
		};

		return GeoListController;

	})(Controller);

	lpjl.XGeoList = GeoListController;

}).call(this);

// Generated by CoffeeScript 1.6.3
/*
	Модуль для преобразования select элемента формы.
	Позволяет осуществлять поиск по содержимому select.
	В случае, если передана функция поиска, то может осуществлять поиск по ее результатам.
*/


(function() {
	'use strict';
	var CityController, CityModel, Controller, GeoController, GeoModel, GeoView, Model, SimpleController, View, doc, dom, events, http, isChild, lpjl, module, utils, _ref,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	lpjl = this.LPJL || alert('Ошибка: Подключите библиотеку LPJL.');

	module = lpjl.createClass(function(config) {
		var el, minReq, searchFunction;
		el = config != null ? config.element : void 0;
		searchFunction = config != null ? config.engine : void 0;
		minReq = config != null ? config.min : void 0;
		new Controller(el, minReq, searchFunction);
		return this;
	}, {
		"name": "XSelect",
		"version": "0.1",
		"description": "Модуль для преобразования select элемента формы."
	});

	module = lpjl.createClass(function(config) {
		var el;
		el = config != null ? config.element : void 0;
		if (!el) {
			return null;
		}
		if (typeof el.__lpjl !== 'undefined') {
			return el.__lpjl;
		}
		el.__lpjl = new SimpleController(el);
		return this;
	}, {
		name: "XSimpleSelect",
		version: "0.1",
		description: "Модуль для преобразования select в красивый."
	});

	module = lpjl.createClass(function(config) {
		var append, el, minReq, searchFunction;
		el = config != null ? config.element : void 0;
		searchFunction = config != null ? config.engine : void 0;
		minReq = config != null ? config.min : void 0;
		append = config != null ? config.append : void 0;
		new CityController(el, minReq, searchFunction, append);
		return this;
	}, {
		"name": "XCitySelect",
		"version": "0.1",
		"description": "Модуль для преобразования select элемента формы."
	});

	module = lpjl.createClass(function(config) {
		var append, clearable, el, minReq, searchFunction;
		el = config != null ? config.element : void 0;
		searchFunction = config != null ? config.engine : void 0;
		minReq = config != null ? config.min : void 0;
		append = config != null ? config.append : void 0;
		clearable = config != null ? config.clearable : void 0;
		new GeoController(el, minReq, searchFunction, append, clearable);
		return this;
	}, {
		"name": "XGeoSelect",
		"version": "0.1",
		"description": "Модуль для преобразования select элемента формы."
	});

	doc = this.document;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	http = lpjl.use("http");

	Model = (function() {
		function Model(src, minReq, searchFunction) {
			if (src) {
				this.init(src);
			}
			this.remoteItems = {};
			this.minReq = minReq;
			if (searchFunction) {
				this.remoteSearch = searchFunction;
			}
			this.search.request = "";
		}

		Model.prototype.init = function(src) {
			var id, name, option, selected, value, _i, _len, _ref;
			this.source = src || {};
			this.items = [];
			this.searchedItems = [];
			_ref = this.source.options;
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				option = _ref[_i];
				value = option.value;
				name = option.getAttribute("data-ophtml")? option.getAttribute("data-ophtml") : option.innerHTML;
				selected = !!option.selected;
				id = this.items.push({
					"value": value,
					"name": name,
					"selected": selected
				});
				this.searchedItems.push({
					"value": value,
					"name": name,
					"selected": selected
				});
				if (selected) {
					this.selected = id - 1;
				}
			}
			return null;
		};

		Model.prototype.get = function() {
			return this.searchedItems;
		};

		Model.prototype.getSelected = function() {
			return this.items[this.selected];
		};

		Model.prototype.selectByValue = function(val) {
			var curSelValue, item, ival, _i, _len, _ref;
			if (typeof val !== 'string') {
				val = '' + val;
			}
			curSelValue = typeof this.selected !== 'undefined' ? this.items[this.selected].value : -1;
			if (curSelValue !== val) {
				_ref = this.items;
				for (_i = 0, _len = _ref.length; _i < _len; _i++) {
					item = _ref[_i];
					ival = item.value;
					if (typeof ival !== 'string') {
						ival = '' + ival;
					}
					if (ival === val) {
						if (this.selected) {
							this.items[this.selected].selected = false;
						}
						item.selected = true;
						this.source.selectedIndex = _i;
						this.selected = _i;
						break;
					} else {
						false;
					}
				}
			}
			return void 0;
		};

		Model.prototype.select = function(id) {
			var selIdx;
			if (id !== this.selected && id < this.items.length) {
				this.items[this.selected].selected = false;
				selIdx = this.source.options.selectedIndex;
				if (selIdx >= 0) {
					this.source.options[selIdx].selected = false;
				}
				this.items[id].selected = true;
				this.selected = id;
				return this.source.options[id].selected = true;
			} else {
				return false;
			}
		};

		Model.prototype.initRemote = function(pat, arr) {
			var first, item, option, selIdx, _i, _len;
			selIdx = this.source.options.selectedIndex;
			if (selIdx >= 0) {
				option = this.source.options[selIdx];
				first = {
					value: option.value,
					name: option.innerHTML,
					selected: true
				};
				this.selected = 0;
			}
			if (arr) {
				this.remoteItems[pat] = [];
				this.items = [];
				if (first) {
					this.items.push(first);
				}
				if (arr.length > 0) {
					for (_i = 0, _len = arr.length; _i < _len; _i++) {
						item = arr[_i];
						if (item.code) {
							this.remoteItems[pat].push({
								value: item.code,
								name: item.name
							});
							this.items.push({
								value: item.code,
								name: item.name
							});
						}
					}
					this.__redrawSource(this.items);
				}
			}
			return void 0;
		};

		Model.prototype.search = function(str, ready) {
			var pat;
			str = str.trim();
			ready = ready || function() {};
			if (!str) {
				ready();
				return null;
			}
			if (this.search.request === str) {
				ready();
				return null;
			}
			if (str.length < this.minReq) {
				this.searchedItems = this.__searchInArray(str, this.items);
				ready();
			} else {
				pat = (str.substr(0, this.minReq)).toUpperCase();
				if (this.remoteItems[pat]) {
					this.searchedItems = this.__searchInArray(str, this.remoteItems[pat]);
					ready();
				} else {
					if (this.remoteSearch) {
						this.remoteSearch(pat, events.proxy(function(result, ptrn) {
							this.initRemote(ptrn, result);
							this.searchedItems = this.__searchInArray(str, this.remoteItems[ptrn]);
							ready();
							return null;
						}, this, pat));
					} else {
						this.searchedItems = this.__searchInArray(str, this.items);
						ready();
					}
				}
			}
			return null;
		};

		Model.prototype.__searchInArray = function(pat, arr) {
			var item, result, tmp, _i, _len;
			result = [];
			for (_i = 0, _len = arr.length; _i < _len; _i++) {
				item = arr[_i];
				if (item.name.toUpperCase().indexOf(pat.trim().toUpperCase()) === 0) {
					tmp = {};
					tmp.name = this.__setHighlights(item.name, pat);
					tmp.value = item.value;
					result.push(tmp);
				}
			}
			return result;
		};

		Model.prototype.__setHighlights = function(str, pattern) {
			return str.replace(new RegExp('(' + pattern + ')', 'i'), '<span>$&</span>');
		};

		Model.prototype.__redrawSource = function(arr) {
			var opt, option, _i, _len;
			if (arr && arr.length) {
				dom.removeChildren(this.source);
				for (_i = 0, _len = arr.length; _i < _len; _i++) {
					option = arr[_i];
					opt = doc.createElement("option");
					opt.innerHTML = option.name;
					opt.value = option.value;
					if (!!option.selected) {
						this.source.selectedIndex = _i;
					}
					this.source.appendChild(opt);
				}
			}
			return true;
		};

		return Model;

	})();

	CityModel = (function(_super) {
		__extends(CityModel, _super);

		function CityModel() {
			_ref = CityModel.__super__.constructor.apply(this, arguments);
			return _ref;
		}

		CityModel.prototype.initRemote = function(pat, arr) {
			var first, item, option, selIdx, _i, _len;
			selIdx = this.source.options.selectedIndex;
			if (selIdx >= 0) {
				option = this.source.options[selIdx];
				first = {
					value: option.value,
					name: option.innerHTML,
					selected: true
				};
				this.selected = 0;
			}
			if (arr) {
				this.remoteItems[pat] = [];
				this.items = [];
				if (first) {
					this.items.push(first);
				}
				if (arr.length > 0) {
					for (_i = 0, _len = arr.length; _i < _len; _i++) {
						item = arr[_i];
						if (item.code) {
							this.remoteItems[pat].push({
								value: item.code,
								name: item.name + ', ' + item.name_country
							});
							this.items.push({
								value: item.code,
								name: item.name + ', ' + item.name_country
							});
						}
					}
					return this.__redrawSource(this.items);
				}
			}
		};

		return CityModel;

	})(Model);

	GeoModel = (function(_super) {
		__extends(GeoModel, _super);

		function GeoModel(src, minReq, searchFunction, clearable) {
			GeoModel.__super__.constructor.call(this, src, minReq, searchFunction);
			this.clearable = clearable;
		}

		GeoModel.prototype.initRemote = function(pat, arr) {
			var def, element, first, item, option, selIdx, _i, _len;
			selIdx = this.source.options.selectedIndex;
			option = this.source.options[0];
			if (this.clearable) {
				def = {
					value: option.value,
					name: option.innerHTML
				};
			}
			if (selIdx === 0) {
				this.selected = 0;
			} else if (selIdx > 0) {
				option = this.source.options[selIdx];
				first = {
					value: option.value,
					name: option.innerHTML,
					selected: true
				};
				this.selected = 1;
			}
			if (arr) {
				this.remoteItems[pat] = [];
				this.items = [];
				if (def) {
					this.items.push(def);
				}
				if (first) {
					this.items.push(first);
				}
				if (arr.length > 0) {
					for (_i = 0, _len = arr.length; _i < _len; _i++) {
						item = arr[_i];
						if (item.code) {
							element = this.parseElement(item);
							this.remoteItems[pat].push({
								value: element.code,
								name: element.name
							});
							this.items.push({
								value: element.code,
								name: element.name
							});
						}
					}
					return this.__redrawSource(this.items);
				}
			}
		};

		GeoModel.prototype.parseElement = function(element) {
			var code, len, max, name, res;
			res = {};
			code = [];
			name = [];
			max = 3;
			code.push(element.code);
			if (element.code_region) {
				code.push(element.code_region);
			}
			if (element.code_country) {
				code.push(element.code_country);
			}
			len = max - code.length;
			while (len > 0) {
				code.unshift(0);
				len -= 1;
			}
			code.reverse();
			name.push(element.name);
			if (element.name_region) {
				name.push(element.name_region);
			}
			if (element.name_country) {
				name.push(element.name_country);
			}
			len = name.length;
			switch (len) {
				case 4:
					name.splice(2, 2);
					break;
				case 3:
					name.splice(1, 1);
			}
			res.code = code.join(',');
			res.name = name.join(', ');
			return res;
		};

		return GeoModel;

	})(Model);

	View = (function() {
		function View(arr, append, css, disabled, constrants, inputEl) {
			this.constrants = constrants || -1;
			this.container = doc.createElement("div");
			this.inputView = doc.createElement("div");
			this.inputElem = doc.createElement(inputEl || "input");
			this.button = doc.createElement("div");
			this.dropdown = doc.createElement("ul");
			this.append = append;
			this.disabled = disabled;
			this.container.appendChild(this.inputView);
			this.inputView.appendChild(this.button);
			this.inputView.appendChild(this.inputElem);
			this.container.appendChild(this.dropdown);
			dom.addClass(this.container, css);
			/*
			for option in arr
				opt = doc.createElement "li"
				opt.innerHTML = option.name
				opt.setAttribute "data-value", option.value
				dom.addClass opt, "xselect-option"
				if option.selected
					dom.addClass opt, "xselect-selected"
					opt.setAttribute "data-selected", 1
					@inputElem.value = option.name
				@dropdown.appendChild opt
			*/

			dom.addClass(this.container, "xselect-container");
			dom.addClass(this.inputView, "xselect-input");
			dom.addClass(this.button, "xselect-button");
			dom.addClass(this.dropdown, "xselect-drop");
			this.inputView.setAttribute('tabindex', Math.floor(Math.random() * 1000));
			/*
			@dropdown.position = -1
			if @append
				opt = doc.createElement "li"
				opt.setAttribute("data-action", @append.action)
				opt.innerHTML = @append.html
				@dropdown.appendChild opt
			*/

			this.reinit(arr, true);
		}

		View.prototype.reinit = function(arr, init) {
			var opt, option, _i, _len;
			dom.removeChildren(this.dropdown);
			if (this.disabled) {
				dom.addClass(this.container, "disabled");
			} else {
				dom.removeClass(this.container, "disabled");
			}
			if (arr.length) {
				for (_i = 0, _len = arr.length; _i < _len; _i++) {
					option = arr[_i];
					opt = doc.createElement("li");
					opt.innerHTML = option.name;
					opt.setAttribute("data-value", option.value);
					opt.setAttribute("data-index", _i);
					dom.addClass(opt, "xselect-option");
					if (option.selected) {
						dom.addClass(opt, "xselect-selected");
						opt.setAttribute("data-selected", 1);
						this.inputElem.value = option.name;
					}
					this.dropdown.appendChild(opt);
					if (!init && this.constrants > 0 && _i >= this.constrants) {
						break;
					}
				}
			} else {
				opt = doc.createElement("li");
				opt.innerHTML = lng("Ничего не найдено");
				dom.addClass(opt, "xselect-option");
				this.dropdown.appendChild(opt);
			}
			this.dropdown.position = -1;
			this.dropdown.scrollTop = 0;
			if (this.append) {
				opt = doc.createElement("li");
				opt.setAttribute("data-action", this.append.action);
				opt.innerHTML = this.append.html;
				this.dropdown.appendChild(opt);
			}
			return true;
		};

		return View;

	})();

	GeoView = (function(_super) {
		__extends(GeoView, _super);

		function GeoView(arr, append, css, disabled, constrants, inputEl) {
			this.clearButton = doc.createElement("div");
			GeoView.__super__.constructor.call(this, arr, append, css, disabled, constrants, inputEl);
			this.inputView.appendChild(this.clearButton);
			dom.addClass(this.clearButton, "xselect-clear-button");
		}

		GeoView.prototype.reinit = function(arr, init) {
			var opt, option, _i, _len;
			dom.removeChildren(this.dropdown);
			if (this.disabled) {
				dom.addClass(this.container, "disabled");
			} else {
				dom.removeClass(this.container, "disabled");
			}
			if (arr.length) {
				for (_i = 0, _len = arr.length; _i < _len; _i++) {
					option = arr[_i];
					if (_i === 0) {
						if (option.selected) {
							this.inputElem.value = option.name;
						}
						continue;
					}
					opt = doc.createElement("li");
					opt.innerHTML = option.name;
					opt.setAttribute("data-value", option.value);
					opt.setAttribute("data-index", _i);
					dom.addClass(opt, "xselect-option");
					if (option.selected) {
						dom.addClass(opt, "xselect-selected");
						opt.setAttribute("data-selected", 1);
						this.inputElem.value = option.name;
					}
					this.dropdown.appendChild(opt);
					if (!init && this.constrants > 0 && _i >= this.constrants) {
						break;
					}
				}
			} else {
				opt = doc.createElement("li");
				opt.innerHTML = lng("Ничего не найдено");
				dom.addClass(opt, "xselect-option");
				this.dropdown.appendChild(opt);
			}
			this.dropdown.position = -1;
			this.dropdown.scrollTop = 0;
			if (this.append) {
				opt = doc.createElement("li");
				opt.setAttribute("data-action", this.append.action);
				opt.innerHTML = this.append.html;
				this.dropdown.appendChild(opt);
			}
			return true;
		};

		return GeoView;

	})(View);

	isChild = function(c, p) {
		if (c === p) {
			return true;
		} else if (c === doc || c === null) {
			return false;
		} else {
			return isChild(c.parentNode, p);
		}
	};

	Controller = (function() {
		function Controller(el, minReq, searchFunc) {
			if (minReq == null) {
				minReq = 2;
			}
			this.source = el;
			this.model = new Model(el, minReq, searchFunc);
			this.disabled = this.source.disabled;
			this.view = new View(this.model.get(), null, this.__getStyle(el), this.disabled);
			el.style.display = "none";
			dom.insertAfter(el, this.view.container);
			this.setHandlers();
		}

		Controller.prototype.__getStyle = function(el) {
			var css;
			css = '';
			css = el.className;
			return css;
		};

		Controller.prototype.inputChangedResult = function(res) {
			var arr;
			arr = this.model.get();
			this.view.reinit(arr);
			if (arr.length) {
				dom.addClass(this.view.container, "active");
				events.triggerEvent(this.view.dropdown, "drop.listdown");
			}
			return null;
		};

		Controller.prototype.handlers = {
			clickOnInput: function(e) {
				var selected;
				this.handlers.onSourceChanged.call(this,{});
				if (this.disabled) {
					return false;
				}
				this.view.inputElem.focus();
				if (!dom.hasClass(this.view.container, 'active')) {
					dom.addClass(this.view.container, "active");
					this.view.inputElem.value = "";
					return this.outerHandler = events.addListener("click", doc, events.proxy(this.handlers.onOuterClick, this));
				} else {
					dom.removeClass(this.view.container, 'active');
					selected = this.model.getSelected();
					if (selected) {
						this.view.inputElem.value = selected.name;
					}
					this.view.inputElem.blur();
					return events.removeListener(doc, 'click', this.outerHandler);
				}
			},
			inputChanged: function() {
				return this.model.search(this.view.inputElem.value, events.proxy(this.inputChangedResult, this));
			},
			onKeyUp: function(e) {
				var charCode;
				charCode = 0;
				if (typeof e.which === "undefined") {
					charCode = e.keyCode;
				} else if (e.which !== 0 && e.keyCode !== 0) {
					charCode = e.which;
				}
				switch (charCode) {
					case 13:
					case 27:
					case 38:
					case 40:
						null;
						break;
					default:
						events.triggerEvent(this.view.inputElem, "input.changed");
				}
				return true;
			},
			onKeyDown: function(e) {
				var charCode, element, options, selected, value;
				charCode = 0;
				if (typeof e.which === "undefined") {
					charCode = e.keyCode;
				} else if (e.which !== 0 && e.keyCode !== 0) {
					charCode = e.which;
				}
				switch (charCode) {
					case 38:
						events.triggerEvent(this.view.dropdown, "drop.listup");
						events.stopDefault(e);
						break;
					case 40:
						events.triggerEvent(this.view.dropdown, "drop.listdown");
						events.stopDefault(e);
						break;
					case 13:
						events.triggerEvent(this.view.dropdown, "drop.selected");
						events.stopDefault(e);
						break;
					case 27:
						selected = this.model.getSelected();
						if (selected) {
							this.view.inputElem.value = selected.name;
						}
						dom.removeClass(this.view.container, "active");
						this.view.inputElem.blur();
						break;
					case 9:
						if (this.view.dropdown.position !== -1) {
							options = dom.getChildNodes(this.view.dropdown);
							element = options[this.view.dropdown.position];
							if (element) {
								value = element.getAttribute("data-value");
								if (value) {
									events.triggerEvent(this.view.dropdown, "drop.selected");
									break;
								}
							}
						}
						selected = this.model.getSelected();
						if (selected) {
							this.view.inputElem.value = selected.name;
						}
						dom.removeClass(this.view.container, "active");
						events.triggerEvent(this.model.source, "blur");
				}
				return true;
			},
			onDropListDown: function(e) {
				var dd, el, options, otop, scr;
				options = dom.getChildNodes(this.view.dropdown);
				if (options.length > 0 && this.view.dropdown.position < options.length) {
					if (this.view.dropdown.position === -1) {
						this.view.dropdown.position += 1;
						dom.addClass(options[this.view.dropdown.position], "active");
					} else if (this.view.dropdown.position === options.length - 1) {
						dom.removeClass(options[this.view.dropdown.position], "active");
						this.view.dropdown.position = 0;
						dom.addClass(options[this.view.dropdown.position], "active");
					} else {
						dom.removeClass(options[this.view.dropdown.position], "active");
						this.view.dropdown.position += 1;
						dom.addClass(options[this.view.dropdown.position], "active");
					}
					dd = this.view.dropdown;
					el = options[dd.position];
					otop = parseInt(el.offsetTop) + parseInt(el.offsetHeight) + 5;
					if (otop < parseInt(dd.scrollTop) || (otop > parseInt(dd.scrollTop) + parseInt(dd.offsetHeight))) {
						scr = otop - parseInt(dd.offsetHeight);
						scr = scr > 0 ? scr : 0;
						dd.scrollTop = scr;
					}
				}
				return true;
			},
			onDropListUp: function(e) {
				var dd, el, options, otop, scr;
				options = dom.getChildNodes(this.view.dropdown);
				if (options.length > 0) {
					if (this.view.dropdown.position <= 0) {
						if (this.view.dropdown.position === 0) {
							dom.removeClass(options[this.view.dropdown.position], "active");
						}
						this.view.dropdown.position = options.length - 1;
						dom.addClass(options[this.view.dropdown.position], "active");
					} else {
						dom.removeClass(options[this.view.dropdown.position], "active");
						this.view.dropdown.position -= 1;
						dom.addClass(options[this.view.dropdown.position], "active");
					}
					dd = this.view.dropdown;
					el = options[dd.position];
					otop = parseInt(el.offsetTop);
					if (otop < parseInt(dd.scrollTop) || otop > (parseInt(dd.scrollTop) + parseInt(dd.offsetHeight))) {
						scr = otop;
						scr = scr > 0 ? scr : 0;
						dd.scrollTop = scr;
					}
				}
				return true;
			},
			onItemSelect: function(e) {
				var action, element, item, options, value;
				if (this.view.dropdown.position !== -1) {
					options = dom.getChildNodes(this.view.dropdown);
					element = options[this.view.dropdown.position];
					if (element) {
						value = element.getAttribute("data-value");
						if (value) {
							this.model.selectByValue(value);
							item = this.model.getSelected();
							this.view.inputElem.value = item.name;
							dom.removeClass(this.view.container, "active");
							events.triggerEvent(this.model.source, "change");
							return events.triggerEvent(this.model.source, "blur");
						} else {
							action = element.getAttribute("data-action");
							if (action === "add-city-from-list") {
								dom.removeClass(this.view.container, "active");
								return events.triggerEvent(this.model.source, "add.fromlist");
							}
						}
					}
				}
			},
			onItemClick: function(e) {
				var action, el, item, value;
				el = e.target || e.srcElement;
				value = el.getAttribute("data-value") || el.parentNode.getAttribute("data-value");
				if (value) {
					this.model.selectByValue(value);
					item = this.model.getSelected();
					this.view.inputElem.value = item.name;
					dom.removeClass(this.view.container, "active");
					events.triggerEvent(this.model.source, "change");
					return events.triggerEvent(this.model.source, "blur");
				} else {
					action = el.getAttribute("data-action") || el.parentNode.getAttribute("data-action");
					if (action === "add-city-from-list") {
						dom.removeClass(this.view.container, "active");
						return events.triggerEvent(this.model.source, "add.fromlist");
					}
				}
			},
			onMouseOverItem: function(e) {
				var childs, el, setOne, toElement;
				setOne = function(nodes, el, cls) {
					var node, _i, _len, _results;
					_results = [];
					for (_i = 0, _len = nodes.length; _i < _len; _i++) {
						node = nodes[_i];
						dom.removeClass(node, cls);
						if (node === el) {
							dom.addClass(el, cls);
							_results.push(this.view.dropdown.position = _i);
						} else {
							_results.push(void 0);
						}
					}
					return _results;
				};
				el = e.target || e.srcElement;
				if (el.parentNode === this.view.dropdown) {
					toElement = e.relatedTarget || e.srcElement;
					if (isChild(toElement, el)) {
						false;
					}
					childs = this.view.dropdown.childNodes;
					return setOne.call(this, childs, el, "active");
				}
			},
			onOuterClick: function(e) {
				var el, selected;
				el = e.target || e.srcElement;
				if (!isChild(el, this.view.container)) {
					selected = this.model.getSelected();
					if (selected) {
						this.view.inputElem.value = selected.name;
					}
					dom.removeClass(this.view.container, "active");
					events.removeListener(doc, 'click', this.outerHandler);
					return events.triggerEvent(this.model.source, 'blur');
				}
			},
			onSourceChanged: function(e) {
				var arr, item;
				this.model.init(this.source);
				arr = this.model.get();
				this.disabled = this.source.disabled;
				this.view.disabled = this.disabled;
				this.view.reinit(arr);
				item = this.model.getSelected();
				return this.view.inputElem.value = item.name;
			},
			inputBlur: function(e) {
				var el, selected;
				el = e.target || e.srcElement;
				selected = this.model.getSelected();
				if (selected) {
					return this.view.inputElem.value = selected.name;
				}
			},
			disable: function(e) {
				var arr;
				this.source.disabled = true;
				this.disabled = this.source.disabled;
				this.view.disabled = this.disabled;
				arr = this.model.get();
				return this.view.reinit(arr);
			}
		};

		Controller.prototype.setHandlers = function() {
			events.addListener("click", this.view.inputView, this.handlers.clickOnInput, this);
			events.addListener("keyup", this.view.container, this.handlers.onKeyUp, this);
			events.addListener("input.changed", this.view.inputElem, this.handlers.inputChanged, this);
			events.addListener("keydown", this.view.container, this.handlers.onKeyDown, this);
			events.addListener("drop.listup", this.view.dropdown, this.handlers.onDropListUp, this);
			events.addListener("drop.listdown", this.view.dropdown, this.handlers.onDropListDown, this);
			events.addListener("drop.selected", this.view.dropdown, this.handlers.onItemSelect, this);
			events.addListener("click", this.view.dropdown, this.handlers.onItemClick, this);
			events.addListener("mouseover", this.view.dropdown, this.handlers.onMouseOverItem, this);
			events.addListener("change", this.source, this.handlers.onSourceChanged, this);
			events.addListener("disable", this.source, this.handlers.disable, this);
			return true;
		};

		Controller.prototype.removeHandlers = function() {
			return true;
		};

		return Controller;

	})();

	CityController = (function(_super) {
		__extends(CityController, _super);

		function CityController(el, minReq, searchFunc, append) {
			var constrants;
			if (minReq == null) {
				minReq = 2;
			}
			this.source = el;
			this.model = new CityModel(el, minReq, searchFunc);
			constrants = searchFunc ? 4 : null;
			this.disabled = this.source.disabled;
			this.view = new View(this.model.get(), append, this.__getStyle(el), this.disabled, constrants);
			el.style.display = "none";
			dom.insertAfter(el, this.view.container);
			this.setHandlers();
		}

		return CityController;

	})(Controller);

	GeoController = (function(_super) {
		__extends(GeoController, _super);

		function GeoController(el, minReq, searchFunc, append, clearable) {
			var constrants;
			if (minReq == null) {
				minReq = 2;
			}
			this.source = el;
			this.model = new GeoModel(el, minReq, searchFunc, clearable);
			constrants = searchFunc ? 20 : null;
			this.clearable = clearable;
			this.disabled = this.source.disabled;
			if (clearable) {
				this.view = new GeoView(this.model.get(), append, this.__getStyle(el), this.disabled, constrants);
			} else {
				this.view = new View(this.model.get(), append, this.__getStyle(el), this.disabled, constrants);
			}
			el.style.display = "none";
			dom.insertAfter(el, this.view.container);
			this.setHandlers();
			if (this.clearable) {
				events.addListener('click', this.view.clearButton, this.onClearClick, this);
			}
		}

		GeoController.prototype.inputChangedResult = function(res) {
			var arr, option;
			arr = this.model.get();
			if (this.clearable && arr.length) {
				option = this.source.options[0];
				arr.unshift({
					value: option.value,
					name: option.innerHTML
				});
			}
			this.view.reinit(arr);
			if (arr.length) {
				dom.addClass(this.view.container, "active");
				events.triggerEvent(this.view.dropdown, "drop.listdown");
			}
			return null;
		};

		GeoController.prototype.onClearClick = function(e) {
			var item;
			if (this.disabled) {
				return false;
			}
			e = e || event;
			if (e.stopPropagation) {
				e.stopPropagation();
			} else {
				e.cancelBubble = true;
			}
			events.stopDefault(e);
			this.model.select(0);
			item = this.model.getSelected();
			this.view.inputElem.value = item.name;
			dom.removeClass(this.view.container, "active");
			events.triggerEvent(this.model.source, "change");
			return events.triggerEvent(this.model.source, "blur");
		};

		return GeoController;

	})(Controller);

	SimpleController = (function(_super) {
		__extends(SimpleController, _super);

		function SimpleController(el, minReq) {
			var item;
			if (minReq == null) {
				minReq = 2;
			}
			this.source = el;
			this.disabled = this.source.disabled;
			this.model = new Model(el, minReq);
			this.view = new View(this.model.get(), null, this.__getStyle(el), this.disabled, null, 'div');
			item = this.model.getSelected();
			this.view.inputElem.innerHTML = item? item.name : "";
			el.style.display = "none";
			dom.insertAfter(el, this.view.container);
			this.setHandlers();
		}

		SimpleController.prototype.onItemSelect = function(e) {
			var action, element, item, options, value;
			if (this.view.dropdown.position !== -1) {
				options = dom.getChildNodes(this.view.dropdown);
				element = options[this.view.dropdown.position];
				if (element) {
					var ind = element.getAttribute("data-index");
					if (ind) {
						this.model.select(ind);
						item = this.model.getSelected();
						this.view.inputElem.innerHTML = item.name;
						dom.removeClass(this.view.container, "active");
						events.triggerEvent(this.model.source, "change");
						return events.triggerEvent(this.model.source, "blur");
					} else {
						action = element.getAttribute("data-action");
						if (action === "add-city-from-list") {
							dom.removeClass(this.view.container, "active");
							return events.triggerEvent(this.model.source, "add.fromlist");
						}
					}
				}
			}
		};

		SimpleController.prototype.onItemClick = function(e) {
			var action, el, item, value;
			el = e.target || e.srcElement;
			var ind = el.getAttribute("data-index") || el.parentNode.getAttribute("data-index");
			if (ind) {
				this.model.select(ind);
				item = this.model.getSelected();
				this.view.inputElem.innerHTML = item.name;
				dom.removeClass(this.view.container, "active");
				events.triggerEvent(this.model.source, "change");
				return events.triggerEvent(this.model.source, "blur");
			} else {
				action = el.getAttribute("data-action") || el.parentNode.getAttribute("data-action");
				if (action === "add-city-from-list") {
					dom.removeClass(this.view.container, "active");
					return events.triggerEvent(this.model.source, "add.fromlist");
				}
			}
		};

		SimpleController.prototype.clickOnInput = function(e) {
			var selected;
			this.reinit();
			if (this.disabled) {
				return false;
			}
			this.view.inputElem.blur();
			if (!dom.hasClass(this.view.container, 'active')) {
				dom.addClass(this.view.container, "active");
				return this.outerHandler = events.addListener("click", doc, events.proxy(this.onOuterClick, this));
			} else {
				dom.removeClass(this.view.container, 'active');
				selected = this.model.getSelected();
				if (selected) {
					this.view.inputElem.innerHTML = selected.name;
				}
				this.view.inputElem.blur();
				return events.removeListener(doc, 'click', this.outerHandler);
			}
		};

		SimpleController.prototype.onOuterClick = function(e) {
			var el, selected;
			el = e.target || e.srcElement;
			if (!isChild(el, this.view.container)) {
				selected = this.model.getSelected();
				if (selected) {
					this.view.inputElem.innerHTML = selected.name;
				}
				dom.removeClass(this.view.container, "active");
				events.removeListener(doc, 'click', this.outerHandler);
			}
			return true;
		};

		SimpleController.prototype.onSourceChanged = function(e) {
			var arr, item;
			this.model.init(this.source);
			arr = this.model.get();
			this.disabled = this.source.disabled;
			this.view.disabled = this.disabled;
			this.view.reinit(arr);
			item = this.model.getSelected();
			return this.view.inputElem.innerHTML = item.name;
		};

		SimpleController.prototype.setHandlers = function() {
			events.addListener("click", this.view.inputView, this.clickOnInput, this);
			events.addListener("keyup", this.view.container, this.handlers.onKeyUp, this);
			events.addListener("keydown", this.view.container, this.handlers.onKeyDown, this);
			events.addListener("drop.listup", this.view.dropdown, this.handlers.onDropListUp, this);
			events.addListener("drop.listdown", this.view.dropdown, this.handlers.onDropListDown, this);
			events.addListener("drop.selected", this.view.dropdown, this.onItemSelect, this);
			events.addListener("click", this.view.dropdown, this.onItemClick, this);
			events.addListener("mouseover", this.view.dropdown, this.handlers.onMouseOverItem, this);
			events.addListener("change", this.source, this.onSourceChanged, this);
			return true;
		};

		SimpleController.prototype.reinit = function() {
			this.onSourceChanged({});
		};

		return SimpleController;

	})(Controller);

	/*
	*/


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var XRadio, doc, dom, events, lpjl, utils;

	lpjl = this.LPJL;

	doc = this.document;

	dom = lpjl.use('dom');

	events = lpjl.use('events');

	utils = lpjl.use('utils');

	XRadio = (function() {
		function XRadio(el) {
			var name;
			if (!el || typeof el.__lpjl !== 'undefined') {
				return null;
			}
			this.src = el;
			name = this.src.name;
			this.group = doc.getElementsByName(name || []);
			this.src.style.display = "none";
			this.element = doc.createElement("div");
			dom.insertAfter(this.src, this.element);
			dom.addClass(this.element, this.src.className);
			dom.addClass(this.element, 'xradio');
			this.element.setAttribute('tabindex', Math.floor(Math.random() * 100000));
			this.checked = this.src.checked;
			utils.log('CHECKED: ', this.checked);
			if (this.checked) {
				this.element.setAttribute('data-checked', 'checked');
				dom.addClass(this.element, 'checked');
			}
			this.disabled = this.src.disabled;
			if (this.disabled) {
				dom.addClass(this.element, 'disabled');
			}
			events.addListener('change', this.src, this.handlers.srcChange, this);
			events.addListener('click', this.element, this.handlers.elementClick, this);
			this.src.__lpjl = this;
		}

		XRadio.prototype.updateGroup = function(except) {
			var el, _i, _len, _ref, _results;
			_ref = this.group;
			_results = [];
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				el = _ref[_i];
				if (except && el === this.src) {
					continue;
				} else {
					_results.push(this.reinitElement(el));
				}
			}
			return _results;
		};

		XRadio.prototype.reinitElement = function(el) {
			if (!el.__lpjl) {
				return;
			}
			if (el.checked) {
				el.__lpjl.element.setAttribute('data-checked', 'checked');
				dom.addClass(el.__lpjl.element, 'checked');
			} else {
				el.__lpjl.element.setAttribute('data-checked', false);
				dom.removeClass(el.__lpjl.element, 'checked');
			}
			if (el.disabled) {
				el.__lpjl.disabled = true;
				return dom.addClass(el.__lpjl.element, 'disabled');
			} else {
				el.__lpjl.disabled = false;
				return dom.removeClass(el.__lpjl.element, 'disabled');
			}
		};

		XRadio.prototype.reinit = function() {
			this.handlers.srcChange.call(this);
		};

		XRadio.prototype.handlers = {
			srcChange: function(e) {
				var chk;
				this.disabled = this.src.disabled;
				if (this.disabled) {
					dom.addClass(this.element, 'disabled');
				} else {
					dom.removeClass(this.element, 'disabled');
				}
				chk = this.src.checked;
				if (chk) {
					this.element.setAttribute('data-checked', 'checked');
					dom.addClass(this.element, 'checked');
					return this.updateGroup(true);
				} else {
					this.element.setAttribute('data-checked', false);
					return dom.removeClass(this.element, 'checked');
				}
			},
			elementClick: function(e) {
				var chk;
				if (this.disabled) {
					return false;
				}
				chk = this.src.checked;
				if (chk) {
					if (this.group.length < 2) {
						this.src.checked = false;
					}
				} else {
					this.src.checked = true;
				}
				this.updateGroup();
				return events.triggerEvent(this.src, 'change');
			}
		};

		return XRadio;

	})();

	lpjl.XRadio = XRadio;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var XCheckbox, doc, dom, events, lpjl, utils;

	lpjl = this.LPJL;

	doc = this.document;

	dom = lpjl.use('dom');

	events = lpjl.use('events');

	utils = lpjl.use('utils');

	XCheckbox = (function() {
		function XCheckbox(el) {
			var name;
			if (!el || typeof el.__lpjl !== 'undefined') {
				return null;
			}
			this.src = el;
			if (!this.src || !this.src.type || this.src.type !== 'checkbox') {
				return;
			}
			name = this.src.name;
			this.src.style.display = "none";
			this.element = doc.createElement("div");
			dom.insertAfter(this.src, this.element);
			dom.addClass(this.element, this.src.className);
			dom.addClass(this.element, 'xcheckbox');
			this.element.setAttribute('tabindex', Math.floor(Math.random() * 100000));
			this.checked = this.src.checked;
			if (this.checked) {
				this.element.setAttribute('data-checked', 'checked');
				dom.addClass(this.element, 'checked');
			}
			this.disabled = this.src.disabled;
			if (this.disabled) {
				dom.addClass(this.element, 'disabled');
			}
			events.addListener('change', this.src, this.handlers.srcChange, this);
			events.addListener('click', this.element, this.handlers.elementClick, this);
			this.src.__lpjl = this;
		}

		XCheckbox.prototype.reinit = function() {
			this.handlers.srcChange.call(this);
		}

		XCheckbox.prototype.handlers = {
			srcChange: function(e) {
				var chk;
				this.disabled = this.src.disabled;
				if (this.disabled) {
					dom.addClass(this.element, 'disabled');
				} else {
					dom.removeClass(this.element, 'disabled');
				}
				chk = this.src.checked;
				if (chk) {
					this.element.setAttribute('data-checked', 'checked');
					return dom.addClass(this.element, 'checked');
				} else {
					this.element.setAttribute('data-checked', false);
					return dom.removeClass(this.element, 'checked');
				}
			},
			elementClick: function(e) {
				var chk;
				if (this.disabled) {
					return false;
				}
				chk = this.src.checked;
				if (chk) {
					this.src.checked = false;
				} else {
					this.src.checked = true;
				}
				return events.triggerEvent(this.src, 'change');
			}
		};

		return XCheckbox;

	})();

	lpjl.XCheckbox = XCheckbox;

}).call(this);

// Generated by CoffeeScript 1.6.3
/*
# Модуль для создания слайдера (ползунка)
*/


(function() {
	'use strict';
	var InputModel, Model, Presenter, SimpleInputModel, SimplePresenter, doc, dom, events, lpjl, module, utils,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	lpjl = this.LPJL || alert('Ошибка: Подключите библиотеку LPJL.');

	module = lpjl.createClass(function(el, config) {
		var model, slider;
		dom.removeChildren(el);
		model = new InputModel(config, el);
		slider = new Presenter(el, model, config.time);
	}, {
		"name": "XSlider",
		"version": "0.1",
		"description": "Модуль для создания слайдера (ползунка) времени."
	});

	module = lpjl.createClass(function(el, config) {
		var model, slider;
		dom.removeChildren(el);
		model = new SimpleInputModel(config, el);
		slider = new SimplePresenter(el, model, config);
	}, {
		"name": "XSimpleSlider",
		"version": "0.1",
		"description": "Модуль для создания слайдера (ползунка)."
	});

	doc = this.document;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	Model = (function() {
		function Model(cfg) {
			cfg = cfg || {};
			this.min = cfg.min || 0;
			this.max = cfg.max || 0;
			this.value = cfg.value || [this.min, this.max];
			this.delta = cfg.delta || 0;
			if (this.value[0] < this.min) {
				this.value[0] = this.min;
			}
			if (this.value[1] > this.max) {
				this.value[1] = this.max;
			}
			this.listeners = {};
		}

		Model.prototype.getMin = function() {
			return this.min;
		};

		Model.prototype.getMax = function() {
			return this.max;
		};

		Model.prototype.getValue = function() {
			return {
				min: this.min,
				max: this.max,
				value: this.value
			};
		};

		Model.prototype.setValue = function(val) {
			var nlv, nrv;
			val = val || [0, 0];
			nlv = val[0];
			nrv = val[1];
			return this.reaction("slide", {
				min: this.min,
				max: this.max,
				value: [val[0] * this.max / 100, val[1] * this.max / 100]
			});
		};

		Model.prototype.setLeft = function(val) {
			var max, min;
			min = this.min || 0;
			max = this.max || 0;
			val = ((val * (max - min) / 100) + min) || 0;
			utils.log("Left val:", val);
			val = val < (this.value[1] - this.delta) ? val : this.value[1] - this.delta;
			this.value[0] = val;
			return this.reaction("slide", {
				min: min,
				max: max,
				value: this.value
			});
		};

		Model.prototype.setRight = function(val) {
			var max, min;
			min = this.min || 0;
			max = this.max || 0;
			val = ((val * (max - min) / 100) + min) || 0;
			utils.log("Right val:", val);
			val = val > (this.value[0] + this.delta) ? val : this.value[0] + this.delta;
			this.value[1] = val;
			return this.reaction("slide", {
				min: min,
				max: max,
				value: this.value
			});
		};

		Model.prototype.listen = function(event, reaction) {
			this.listeners[event] = this.listeners[event] || (this.listeners[event] = []);
			return this.listeners[event].push(reaction);
		};

		Model.prototype.reaction = function(event, param) {
			var func, _i, _len, _ref, _results;
			_ref = this.listeners[event];
			_results = [];
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				func = _ref[_i];
				_results.push(func(param));
			}
			return _results;
		};

		return Model;

	})();

	InputModel = (function(_super) {
		__extends(InputModel, _super);

		function InputModel(cfg, src) {
			var createHidden, h, m, _ref, _ref1;
			InputModel.__super__.constructor.call(this, cfg);
			createHidden = function(name, src) {
				var inp;
				inp = doc.createElement("input");
				inp.type = "hidden";
				inp.name = name;
				src.appendChild(inp);
				inp.value = 0;
				return inp;
			};
			this.fromH = createHidden('fsmschat_htime_from', src);
			this.fromM = createHidden('fsmschat_mtime_from', src);
			this.toH = createHidden('fsmschat_htime_to', src);
			this.toM = createHidden('fsmschat_mtime_to', src);
			_ref = this.getTime(this.value[0]), h = _ref[0], m = _ref[1];
			this.fromH.value = h;
			this.fromM.value = m;
			_ref1 = this.getTime(this.value[1]), h = _ref1[0], m = _ref1[1];
			this.toH.value = h;
			this.toM.value = m;
		}

		InputModel.prototype.setLeft = function(val) {
			var h, m, _ref;
			InputModel.__super__.setLeft.call(this, val);
			_ref = this.getTime(this.value[0]), h = _ref[0], m = _ref[1];
			this.fromH.value = h;
			this.fromM.value = m;
			return utils.log("left:", this.value[0]);
		};

		InputModel.prototype.setRight = function(val) {
			var h, m, _ref;
			InputModel.__super__.setRight.call(this, val);
			_ref = this.getTime(this.value[1]), h = _ref[0], m = _ref[1];
			this.toH.value = h;
			this.toM.value = m;
			return utils.log("right", this.value[1]);
		};

		InputModel.prototype.getTime = function(time) {
			var h, m;
			h = Math.floor(time / 60);
			m = Math.floor(time - h * 60);
			return [h, m];
		};

		return InputModel;

	})(Model);

	SimpleInputModel = (function(_super) {
		__extends(SimpleInputModel, _super);

		function SimpleInputModel(cfg, src) {
			var createHidden, from, to, _ref;
			SimpleInputModel.__super__.constructor.call(this, cfg);
			createHidden = function(name, src) {
				var inp;
				inp = doc.createElement("input");
				inp.type = "hidden";
				inp.name = name || '';
				src.appendChild(inp);
				inp.value = 0;
				return inp;
			};
			this.from = cfg.inputFromElement ? cfg.inputFromElement : createHidden(cfg.inputFrom, src);
			this.to = cfg.inputToElement ? cfg.inputToElement : createHidden(cfg.inputTo, src);
			_ref = this.value, from = _ref[0], to = _ref[1];
			this.from.value = from;
			this.to.value = to;
		}

		SimpleInputModel.prototype.setLeft = function(val) {
			var v;
			SimpleInputModel.__super__.setLeft.call(this, val);
			v = this.getValue();
			return this.from.value = Math.floor(v.value[0]);
		};

		SimpleInputModel.prototype.setRight = function(val) {
			var v;
			SimpleInputModel.__super__.setRight.call(this, val);
			v = this.getValue();
			return this.to.value = Math.floor(v.value[1]);
		};

		return SimpleInputModel;

	})(Model);

	Presenter = (function() {
		function Presenter(el, model, time) {
			this.container = el || doc.createElement("div");
			this.lslider = doc.createElement("a");
			this.rslider = doc.createElement("a");
			this.range = doc.createElement("div");
			this.lvalue = doc.createElement("span");
			this.rvalue = doc.createElement("span");
			this.lslider.appendChild(this.lvalue);
			this.rslider.appendChild(this.rvalue);
			this.container.appendChild(this.lslider);
			this.container.appendChild(this.range);
			this.container.appendChild(this.rslider);
			dom.addClass(this.container, "time_slider");
			dom.addClass(this.lslider, "slider");
			dom.addClass(this.lslider, "slider-left");
			dom.addClass(this.rslider, "slider");
			dom.addClass(this.rslider, "slider-right");
			dom.addClass(this.range, "period");
			dom.addClass(this.range, time);
			this.model = model;
			this.model.listen("slide", events.proxy(this.handlers.onSlide, this));
			this.setHandlers();
			this.render(this.model.getValue());
		}

		Presenter.prototype.render = function(cfg) {
			var left, max, min, right, width;
			min = cfg.min || 0;
			max = cfg.max || 0;
			left = (cfg.value[0] - min) * 100 / (max - min);
			right = (cfg.value[1] - min) * 100 / (max - min);
			width = right - left;
			if (this.single) {
				if (this.single === 'max') {
					this.lslider.style.display = 'none';
					this.lvalue.style.display = 'none';
				}
				if (this.single === 'min') {
					this.rslider.style.display = 'none';
					this.rvalue.style.display = 'none';
				}
			}
			this.lslider.style.left = left + "%";
			this.lslider.value = left;
			this.rslider.style.left = right + "%";
			this.rslider.value = right;
			this.range.style.left = left + "%";
			this.range.style.width = width + "%";
			this.lvalue.innerHTML = this.toText(cfg.value[0]);
			this.rvalue.innerHTML = this.toText(cfg.value[1]);
			this.lslider.click();
			return this.rslider.click();
		};

		Presenter.prototype.handlers = {
			onClick: function(e) {
				var el, labs, pageX, rabs, shiftX, value;
				el = e.target || e.srcElement;
				shiftX = dom.getOffset(this.container).left;
				pageX = e.pageX || e.clientX + (doc.documentElement && doc.documentElement.scrollLeft || doc.body && doc.body.scrollLeft || 0);
				value = pageX - shiftX;
				value = Math.floor(value * 100 / this.container.offsetWidth);
				value = value < 0 ? 0 : value;
				value = value > 100 ? 100 : value;
				labs = Math.abs(this.lslider.value - value);
				rabs = Math.abs(this.rslider.value - value);
				utils.log("labs: ", labs, ", rabs: ", rabs);
				if (el === this.container || el === this.range) {
					if (labs <= rabs) {
						this.model.setLeft(value || 0);
					}
					if (labs > rabs) {
						this.model.setRight(value || 0);
					}
				}
				return false;
			},
			onFromChange: function(e) {
				var el, val, value;
				el = e.target || e.srcElement;
				value = parseInt(el.value) - this.model.min;
				if (value < 0) {
					value = 0;
				}
				val = value * 100 / (this.model.max - this.model.min);
				if (el.value > this.model.value[1]) {
					val = this.model.value[1];
				}
				return this.model.setLeft(val || 0);
			},
			onToChange: function(e) {
				var el, val;
				el = e.target || e.srcElement;
				val = parseInt(el.value);
				if (val > this.model.max) {
					val = this.model.max;
				}
				val -= this.model.min;
				if (val < 0) {
					val = 0;
				}
				val = val * 100 / (this.model.max - this.model.min);
				if (el.value < this.model.min) {
					val = this.model.value[0];
				}
				return this.model.setRight(val || 0);
			},
			onMouseDown: function(e) {
				var el, mouseUp, moveAt;
				el = e.target || e.srcElement;
				events.stopDefault(e);
				moveAt = events.proxy(function(e) {
					var pageX, shiftX, value;
					events.stopDefault(e);
					shiftX = dom.getOffset(this.container).left;
					if (el === this.lslider || el === this.rslider) {
						pageX = e.pageX || e.clientX + (doc.documentElement && doc.documentElement.scrollLeft || doc.body && doc.body.scrollLeft || 0);
						value = pageX - shiftX;
						value = value * 100 / this.container.offsetWidth;
						value = value < 0 ? 0 : value;
						value = value > 100 ? 100 : value;
						el.value = value;
						if (el === this.lslider) {
							this.model.setLeft(el.value || 0);
						}
						if (el === this.rslider) {
							return this.model.setRight(el.value || 0);
						}
					}
				}, this);
				mouseUp = function(e) {
					events.stopDefault(e);
					events.removeListener(doc, "mousemove", moveAt);
					events.removeListener(doc, "mouseup", mouseUp);
					return events.removeListener(el, "mouseup", mouseUp);
				};
				events.addListener("mousemove", doc, moveAt);
				events.addListener("mouseup", el, mouseUp);
				events.addListener("mouseup", doc, mouseUp);
				events.addListener("dragstart", el, function() {
					return false;
				});
				return events.addListener("selectstart", doc.body, function() {
					return false;
				});
			},
			onSlide: function(cfg) {
				return this.render(cfg);
			}
		};

		Presenter.prototype.setHandlers = function() {
			events.addListener("mousedown", this.lslider, this.handlers.onMouseDown, this);
			events.addListener("mousedown", this.rslider, this.handlers.onMouseDown, this);
			events.addListener("click", this.container, this.handlers.onClick, this);
			events.addListener("change", this.model.from, this.handlers.onFromChange, this);
			return events.addListener("change", this.model.to, this.handlers.onToChange, this);
		};

		Presenter.prototype.toText = function(minutes) {
			var hours, mints;
			hours = Math.floor(minutes / 60) + "";
			mints = Math.floor(minutes - (hours * 60)) + "";
			return (hours.length > 1 ? hours : '0' + hours) + ":" + (mints.length > 1 ? mints : '0' + mints);
		};

		return Presenter;

	})();

	SimplePresenter = (function(_super) {
		__extends(SimplePresenter, _super);

		function SimplePresenter(el, model, config) {
			this.single = config.single || false;
			SimplePresenter.__super__.constructor.call(this, el, model, config.className);
			if (typeof config.onSlide === 'function') {
				this.model.listen("slide", config.onSlide);
			}
		}

		SimplePresenter.prototype.toText = function(value) {
			var val;
			val = value;
			if (!isNaN(val)) {
				val = parseInt(val);
			}
			return val;
		};

		return SimplePresenter;

	})(Presenter);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var CityList, CitySelect, GeoList, GeoSelect, doc, dom, events, getSearchFunction, http, lpjl, module, utils;

	lpjl = this.LPJL || alert('Ошибка: Подключите библиотеку LPJL.');

	module = lpjl.createClass(function(el, nopos) {
		var cityList;
		utils.log("RTHIS: ", this);
		new CitySelect({
			element: el,
			min: 2,
			engine: getSearchFunction(5),
			append: {
				html: lng("Введите название вашего города или выберите из списка"),
				action: "add-city-from-list"
			}
		});
		cityList = new CityList(el, events.proxy(function(city) {
			var opt;
			dom.removeChildren(this);
			opt = doc.createElement("option");
			opt.innerHTML = city.name;
			opt.value = city.value;
			this.appendChild(opt);
			this.selectedIndex = 0;
			events.triggerEvent(this, "change");
			return events.triggerEvent(this, "blur");
		}, el), {
			name: 'Россия',
			value: 3159
		}, nopos);
		cityList.hide();
		events.addListener("add.fromlist", el, function(e) {
			cityList.show();
			return null;
		});
		return this;
	}, {
		"name": "ReachSelect",
		"version": "0.1",
		"description": "Модуль для преобразования select в элемент для выбора города."
	});

	module = lpjl.createClass(function(el, nopos, resolution, clearable) {
		var cityList;
		utils.log("RTHIS: ", this);
		new GeoSelect({
			element: el,
			min: 2,
			engine: getSearchFunction(resolution || 9),
			append: {
				html: lng("Введите название вашего города или выберите из списка"),
				action: "add-city-from-list"
			},
			clearable: clearable
		});
		cityList = new GeoList(el, events.proxy(function(city) {
			var opt;
			dom.removeChildren(this);
			opt = doc.createElement("option");
			opt.innerHTML = city.name;
			opt.value = city.value;
			this.appendChild(opt);
			this.selectedIndex = 0;
			events.triggerEvent(this, "change");
			return events.triggerEvent(this, "blur");
		}, el), {
			name: 'Россия',
			value: 3159
		}, nopos);
		cityList.hide();
		events.addListener("add.fromlist", el, function(e) {
			cityList.extShow();
			return null;
		});
		return this;
	}, {
		"name": "ReachGeoSelect",
		"version": "0.1",
		"description": "Модуль для преобразования select в geo."
	});

	doc = this.document;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	http = lpjl.use("http");

	CitySelect = lpjl.use("XCitySelect");

	CityList = lpjl.use("XCityList");

	GeoList = lpjl.use("XGeoList");

	GeoSelect = lpjl.use("XGeoSelect");

	getSearchFunction = function(resolution) {
		resolution = resolution || 5;
		return function(str, callback) {
			var link;
			link = ("/api/a-geo/type-" + resolution + "/name-") + encodeURIComponent(str);
			http.getJSON(link, events.proxy(function(res, cb) {
				if (res && res.geo) {
					cb(res.geo);
				}
				return null;
			}, this, callback));
			return null;
		};
	};

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var AjaxRule, ConditionRule, Form, NRegexpRule, RegexpRule, ValidatorRule, async, doc, dom, events, http, lpjl, rules, utils, win, _ref, _ref1, _ref2, _ref3,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	win = this;

	doc = win.document;

	lpjl = win.LPJL;

	utils = lpjl.use('utils');

	http = lpjl.use('http');

	async = lpjl.use('async');

	events = lpjl.use('events');

	dom = lpjl.use('dom');

	Form = (function() {
		function Form(form, rules, strategy, submit, success) {
			var button, counter, elem, getFunc, tasks, _i, _len, _ref, _ref1;
			this.form = form;
			this.elements = form.elements;
			this.rules = rules;
			this.disabled = true;
			this.errorClass = 'valid_error';
			this.strategy = strategy;
			this.success = success || null;
			this.sbutton = submit || null;
			if ((_ref = this.sbutton) != null) {
				_ref.onclick = null;
			}
			if (this.strategy) {
				button = submit || this.form['submit'];
				if (button && button.tagName) {
					dom.removeClass(button, 'btn4gray');
					dom.addClass(button, 'btn4blue');
					button.disabled = false;
				}
			}
			utils.log('Form init:', rules);
			tasks = [];
			counter = 0;
			getFunc = function(elem, type) {
				var that;
				that = this;
				return function(res, cb) {
					var callback, result;
					if (typeof res === 'function') {
						callback = res;
						result = null;
					} else {
						callback = cb;
						result = res;
					}
					return that.validate(elem, type, true, callback);
				};
			};
			_ref1 = this.elements;
			for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
				elem = _ref1[_i];
				if (this.rules[elem.name]) {
					elem.touched = false;
					if (elem.type === 'checkbox' || elem.type === 'select' || elem.type === 'select-one' || elem.type === 'radio') {
						if (elem.type === 'checkbox' || elem.type === 'radio') {
							elem.touched = true;
						}
						tasks.push(getFunc.call(this, elem, 'click'));
					} else {
						tasks.push(getFunc.call(this, elem, 'keyup'));
					}
				}
			}
			async.waterfall(tasks, events.proxy(function(errors, result) {
				return this.showButton();
			}, this));
			this.setHandlers();
		}

		Form.prototype.getValue = function(el) {
			if (el.type === 'checkbox') {
				return el.checked;
			} else {
				return el.value;
			}
		};

		Form.prototype.getElement = function(name) {
			var element, _i, _len, _ref;
			_ref = this.elements;
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				element = _ref[_i];
				if (element.name === name) {
					return element;
				}
			}
			return null;
		};

		Form.prototype.fieldValidate = function(e) {
			var src, type;
			e = e || event;
			src = e.target || e.srcElement;
			type = e.type;
			return this.validate(src, type);
		};

		Form.prototype.validate = function(element, type, quite, finalCall, force) {
			var el_rules, form, mask, rule, tasks, _i, _len;
			el_rules = this.rules[element.name].rules;
			tasks = [];
			if (!el_rules) {
				return false;
			}
			for (_i = 0, _len = el_rules.length; _i < _len; _i++) {
				rule = el_rules[_i];
				form = this;
				mask = rule.getMask();
				if (!force && mask && mask !== type) {
					continue;
				}
				tasks.push((function(rule, form) {
					return function(res, cb) {
						var callback, result;
						if (typeof res === 'function') {
							callback = res;
							result = null;
						} else {
							callback = cb;
							result = res;
						}
						if (typeof result === 'string') {
							return callback(result, null);
						} else {
							return rule.validate(form, element, callback);
						}
					};
				})(rule, form));
			}
			async.waterfall(tasks, events.proxy(function(errors, result, element, type, quite) {
				element.oldValue = this.getValue(element);
				if (quite) {
					if (errors) {
						element.valid = false;
					} else {
						element.valid = true;
					}
				} else {
					if (errors) {
						this.disabled = true;
						this.setError(element, errors, type);
					} else {
						this.removeError(element, type);
					}
				}
				if (finalCall) {
					if (errors) {
						finalCall(null, errors);
					} else {
						finalCall();
					}
				}
				return null;
			}, this, element, type, quite));
			return null;
		};

		Form.prototype.setError = function(element, errors, type) {
			var init, isIn;
			init = this.rules[element.name].init || [];
			isIn = function(mas, etype) {
				var e, _i, _len;
				for (_i = 0, _len = mas.length; _i < _len; _i++) {
					e = mas[_i];
					if (e === etype) {
						return true;
					}
				}
				return false;
			};
			if (!element.touched) {
				if (type === 'blur') {
					element.touched = true;
				} else if (isIn(init, type)) {
					element.touched = true;
				} else {
					return null;
				}
			}
			if (errors) {
				element.valid = false;
				element.error = errors;
				this.showError(element, errors);
			}
			this.showButton();
			return null;
		};

		Form.prototype.removeError = function(element) {
			var dep, depElem, depend, errEl, _i, _len;
			element.valid = true;
			element.error = null;
			dom.removeClass(element.parentNode, this.errorClass);
			errEl = dom.getSiblingByClass(element, 'errorMessage');
			if (errEl) {
				errEl.style.display = "none";
			}
			depend = this.rules[element.name].depend;
			if (depend) {
				for (_i = 0, _len = depend.length; _i < _len; _i++) {
					dep = depend[_i];
					if (this.rules[dep]) {
						depElem = this.form[dep];
						if (!depElem.valid && depElem.touched) {
							this.showError(depElem, depElem.error);
						}
					}
				}
			}
			this.showButton();
			return null;
		};

		Form.prototype.showButton = function() {
			var button, elem, show_button, _i, _len, _ref;
			show_button = true;
			_ref = this.elements;
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				elem = _ref[_i];
				if (this.rules[elem.name]) {
					utils.log('elem:', elem, elem.valid);
					if (!elem.valid) {
						show_button = false;
					}
				}
			}
			if (show_button) {
				this.disabled = false;
			}
			button = this.form['submit'];
			if (show_button) {
				dom.removeClass(button, 'btn4gray');
				dom.addClass(button, 'btn4blue');
				return button.disabled = false;
			} else {
				if (!this.strategy) {
					dom.removeClass(button, 'btn4blue');
					dom.addClass(button, 'btn4gray');
					return button.disabled = true;
				}
			}
		};

		Form.prototype.showError = function(element, errors) {
			var errEl;
			errEl = dom.getSiblingByClass(element, 'errorMessage');
			utils.log("ERREL:", errEl);
			if (errEl === void 0) {
				errEl = doc.createElement('div');
				errEl.className = 'errorMessage';
				element.parentNode.insertBefore(errEl, element);
			}
			errEl.innerHTML = errors;
			errEl.style.display = "block";
			return dom.addClass(element.parentNode, this.errorClass);
		};

		Form.prototype.onSubmit = function(e) {
			var elem, _i, _len, _ref, _ref1;
			if (this.strategy) {
				_ref = this.elements;
				for (_i = 0, _len = _ref.length; _i < _len; _i++) {
					elem = _ref[_i];
					if (!elem.valid) {
						if (this.rules[elem.name]) {
							elem.touched = true;
							if (elem.type === 'checkbox' || elem.type === 'select' || elem.type === 'select-one') {
								this.validate(elem, 'click', null, null, true);
							} else {
								this.validate(elem, 'keyup', null, null, true);
							}
						}
					}
				}
			}
			if (this.disabled) {
				events.stopDefault(e);
				if (e.stopPropagation) {
					e.stopPropagation();
				} else {
					e.returnValue = false;
				}
				if ((_ref1 = this.sbutton) != null) {
					_ref1.onclick = null;
				}
				return false;
			} else {
				if (this.success) {
					return this.success(this.form);
				}
				return true;
			}
		};

		Form.prototype.setHandlers = function() {
			var element, _i, _len, _ref, _results;
			this.form.onsubmit = events.proxy(function(e) {
				return this.onSubmit(e);
			}, this);
			_ref = this.elements;
			_results = [];
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				element = _ref[_i];
				if (this.rules[element.name]) {
					events.addListener('keyup', element, this.fieldValidate, this);
					events.addListener('blur', element, this.fieldValidate, this);
					utils.log(element.type);
					if (element.type === 'checkbox') {
						events.addListener('click', element, this.fieldValidate, this);
					}
					if (element.type === 'select' || element.type === 'select-one') {
						_results.push(events.addListener('change', element, this.fieldValidate, this));
					} else {
						_results.push(void 0);
					}
				} else {
					_results.push(void 0);
				}
			}
			return _results;
		};

		return Form;

	})();

	ValidatorRule = (function() {
		function ValidatorRule(condition, message, depend, mask) {
			this.condition = condition;
			this.message = message;
			this.depend = depend;
			this.mask = mask;
		}

		ValidatorRule.prototype.getMask = function() {
			return this.mask;
		};

		ValidatorRule.prototype.validate = function(form, el, callback) {
			utils.log('Not implemented');
			return callback(false);
		};

		return ValidatorRule;

	})();

	ConditionRule = (function(_super) {
		__extends(ConditionRule, _super);

		function ConditionRule() {
			_ref = ConditionRule.__super__.constructor.apply(this, arguments);
			return _ref;
		}

		ConditionRule.prototype.validate = function(form, el, callback) {
			var data, elm, param, re, test, _i, _len, _ref1;
			re = /^\w+$/;
			this.params_arr = this.condition.split(/\s+/);
			data = '';
			_ref1 = this.params_arr;
			for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
				param = _ref1[_i];
				if (re.test(param)) {
					if (param === "this") {
						param = el;
					} else {
						elm = form.getElement(param);
						if (elm) {
							param = elm;
						}
					}
				}
				this.params_arr[_i] = param;
				data += typeof param === "string" ? param : "this.params_arr[" + _i + "]";
			}
			test = eval(data.toString());
			if (eval(data)) {
				return callback();
			} else {
				return callback(this.message);
			}
		};

		return ConditionRule;

	})(ValidatorRule);

	RegexpRule = (function(_super) {
		__extends(RegexpRule, _super);

		function RegexpRule() {
			_ref1 = RegexpRule.__super__.constructor.apply(this, arguments);
			return _ref1;
		}

		RegexpRule.prototype.validate = function(form, el, callback) {
			utils.log("Regexp:");
			if (!this.condition.test(el.value)) {
				callback(this.message);
			} else {
				callback();
			}
			return null;
		};

		return RegexpRule;

	})(ValidatorRule);

	NRegexpRule = (function(_super) {
		__extends(NRegexpRule, _super);

		function NRegexpRule() {
			_ref2 = NRegexpRule.__super__.constructor.apply(this, arguments);
			return _ref2;
		}

		NRegexpRule.prototype.validate = function(form, el, callback) {
			if (this.condition.test(el.value)) {
				callback(this.message);
			} else {
				callback();
			}
			return null;
		};

		return NRegexpRule;

	})(ValidatorRule);

	AjaxRule = (function(_super) {
		__extends(AjaxRule, _super);

		function AjaxRule() {
			_ref3 = AjaxRule.__super__.constructor.apply(this, arguments);
			return _ref3;
		}

		AjaxRule.prototype.validate = function(form, el, callback) {
			var link;
			link = this.condition.replace(/this/g, encodeURI(el.value));
			return http.getText(link, events.proxy(function(response) {
				var rt;
				rt = response.split("\t");
				if (rt[0] === '0') {
					return callback(this.message);
				} else {
					return callback();
				}
			}, this));
		};

		return AjaxRule;

	})(ValidatorRule);

	rules = {};

	rules.ConditionRule = ConditionRule;

	rules.RegexpRule = RegexpRule;

	rules.NRegexpRule = NRegexpRule;

	rules.AjaxRule = AjaxRule;

	lpjl.Form = Form;

	lpjl.Form.rules = rules;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var Calendar, CalendarModel, doc, dom, events, glob, http, lpjl, module, utils;

	lpjl = this.LPJL || alert('Ошибка: Подключите библиотеку LPJL.');

	module = lpjl.createClass(function(elFrom, elTo, elView, conf) {
		return new Calendar(elFrom, elTo, elView, conf);
	}, {
		"name": "XCalendar",
		"version": "0.1",
		"description": "Модуль выбора даты."
	});

	glob = this;

	doc = this.document;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	http = lpjl.use("http");

	CalendarModel = (function() {
		function CalendarModel(date) {
			this.listeners = {};
			this.date = date ? this.reSetDate(date) : new Date();
			this.generate();
		}

		CalendarModel.prototype.listen = function(param, callback) {
			this.listeners[param] = this.listeners[param] || [];
			if (typeof callback === 'function') {
				this.listeners[param].push(callback);
			}
		};

		CalendarModel.prototype.detach = function(param, callback) {
			var callbacks, cb, _i, _len;
			if (typeof this.listeners[param] !== 'undefined') {
				callbacks = this.listeners[param];
				for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
					cb = callbacks[_i];
					if (cb === callback) {
						callbacks.splice(_i, 1);
						return true;
					}
				}
			}
			return false;
		};

		CalendarModel.prototype.fireEvent = function(event_name) {
			var args, callback, callbacks, slice, _i, _len, _results;
			callbacks = this.listeners[event_name] || [];
			slice = [].slice;
			args = slice.call(arguments, 1);
			_results = [];
			for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
				callback = callbacks[_i];
				_results.push(callback.apply(this, args));
			}
			return _results;
		};

		CalendarModel.prototype.nextYear = function() {
			var year;
			year = this.date.getFullYear() + 1;
			this.date.setFullYear(year);
			return this.generate();
		};

		CalendarModel.prototype.prevYear = function() {
			var year;
			year = this.date.getFullYear() - 1;
			if (year < 0) {
				year = 0;
			}
			this.date.setFullYear(year);
			return this.generate();
		};

		CalendarModel.prototype.setYear = function(y) {
			var year;
			if (year < 0) {
				year = 0;
			}
			this.date.setFullYear(year);
			return this.generate();
		};

		CalendarModel.prototype.nextMonth = function() {
			var month;
			month = this.date.getMonth();
			this.date.setMonth(month + 1);
			if (this.date.getMonth() === month) {
				this.date.setMonth(month + 1);
			}
			if (this.date.getMonth() > month + 1) {
				this.date.setMonth(month + 1);
			}
			return this.generate();
		};

		CalendarModel.prototype.prevMonth = function() {
			var month;
			month = this.date.getMonth();
			this.date.setMonth(month - 1);
			if (this.date.getMonth() === month) {
				this.date.setMonth(month - 1);
			}
			return this.generate();
		};

		CalendarModel.prototype.setDate = function(d) {
			this.date.setDate(d);
			return this.fireEvent('CHANGEDATE');
		};

		CalendarModel.prototype.reSetDate = function(d) {
			var date, day, month, nDay, nMonth, nYear, newDate, year;
			date = d.split('.');
			day = parseInt(date[0]) || null;
			month = parseInt(date[1]) || null;
			year = parseInt(date[2]) || null;
			if (day === null || month === null || year === null) {
				return false;
			}
			month -= 1;
			newDate = new Date(year, month, day);
			nDay = newDate.getDate();
			nMonth = newDate.getMonth();
			nYear = newDate.getFullYear();
			if (day !== nDay || month !== nMonth || year !== nYear) {
				return false;
			}
			this.date = newDate;
			this.generate();
			return newDate;
		};

		CalendarModel.prototype.getText = function() {
			var d, date, m;
			date = [];
			d = this.date.getDate();
			if (d < 10) {
				d = '0' + d;
			}
			date.push(d);
			m = this.date.getMonth() + 1;
			if (m < 10) {
				m = '0' + m;
			}
			date.push(m);
			date.push(this.date.getFullYear());
			return date.join('.');
		};

		CalendarModel.prototype.generate = function() {
			var curMonth, current, d, day, dayOfWeek, first, needIncr, prevDayOfWeek, savedMonth, setPrev, weekNr, weeks, _i, _j;
			current = new Date(this.date.getTime());
			savedMonth = current.getMonth();
			weeks = [];
			weekNr = 0;
			prevDayOfWeek = -1;
			setPrev = function(day, weeks, current) {
				var d, faleDay, prev, _i, _results;
				day = day - 1;
				faleDay = 0;
				_results = [];
				for (d = _i = day; day <= 0 ? _i <= 0 : _i >= 0; d = day <= 0 ? ++_i : --_i) {
					prev = new Date(current.getTime());
					prev.setDate(faleDay);
					weeks[0] = weeks[0] || [];
					weeks[0][d] = {
						date: prev.getDate(),
						unactive: true
					};
					_results.push(faleDay -= 1);
				}
				return _results;
			};
			first = true;
			needIncr = true;
			for (day = _i = 1; _i <= 31; day = ++_i) {
				current.setDate(day);
				dayOfWeek = (current.getDay() + 6) % 7;
				curMonth = current.getMonth();
				if (first && dayOfWeek !== 0) {
					first = false;
					setPrev(dayOfWeek, weeks, current);
				}
				if (prevDayOfWeek > dayOfWeek) {
					weekNr += 1;
				}
				prevDayOfWeek = dayOfWeek;
				if (savedMonth === curMonth) {
					weeks[weekNr] = weeks[weekNr] || [];
					weeks[weekNr][dayOfWeek] = {
						date: day
					};
				} else {
					needIncr = false;
					break;
				}
			}
			if (needIncr) {
				dayOfWeek += 1;
			}
			day = 1;
			if (weeks[weekNr] && weeks[weekNr].length < 7) {
				for (d = _j = dayOfWeek; dayOfWeek <= 6 ? _j <= 6 : _j >= 6; d = dayOfWeek <= 6 ? ++_j : --_j) {
					weeks[weekNr][d] = {
						date: day,
						unactive: true
					};
					day += 1;
				}
			}
			this.weeks = weeks;
			return this.fireEvent('CHANGEDATE');
		};

		return CalendarModel;

	})();

	Calendar = (function() {
		function Calendar(elFrom, elTo, elView, conf) {
			this.elFrom = elFrom;
			this.elTo = elTo;
			this.elView = elView;
			this.fromView = conf.fromView;
			this.toView = conf.toView;
			this.selectButton = conf.selectButton;
			this.cancelButton = conf.cancelButton;
			this.fromDateString = conf.fromDateString;
			this.toDateString = conf.toDateString;
			this.fromModel = new CalendarModel(this.elFrom.value);
			this.toModel = new CalendarModel(this.elTo.value);
			if (this.fromModel.date.getTime() > this.toModel.date.getTime()) {
				this.toModel = new CalendarModel(this.elTo.value);
			}
			this.fromModel.listen('CHANGEDATE', events.proxy(function() {
				return this.redraw('from');
			}, this));
			this.toModel.listen('CHANGEDATE', events.proxy(function() {
				return this.redraw('to');
			}, this));
			this.setHandlers(this.fromModel, this.fromView);
			this.setHandlers(this.toModel, this.toView);
			events.addListener('click', this.selectButton, this.selectValues, this);
			events.addListener('click', this.cancelButton, this.close, this);
			events.addListener('focus', this.elFrom, this.open, this);
			events.addListener('focus', this.elTo, this.open, this);
			this.monthNames = conf.monthNames || ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
			this.fromModel.generate();
			this.toModel.generate();
		}

		Calendar.prototype.redraw = function(m) {
			var curDate, curWeeks, day, model, monthEl, tabelEl, td, tr, trs, view, week, _i, _j, _len, _len1;
			model = m === 'from' ? this.fromModel : this.toModel;
			view = m === 'from' ? this.fromView : this.toView;
			monthEl = view.querySelectorAll('.month-name')[0];
			monthEl.innerHTML = this.monthNames[model.date.getMonth()];
			curDate = model.date.getDate();
			curWeeks = model.weeks;
			tabelEl = view.querySelectorAll('.' + m + '-date-table')[0];
			trs = tabelEl.childNodes;
			while (trs.length) {
				tr = trs[0];
				tabelEl.removeChild(tr);
			}
			for (_i = 0, _len = curWeeks.length; _i < _len; _i++) {
				week = curWeeks[_i];
				tr = doc.createElement('tr');
				for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
					day = week[_j];
					td = doc.createElement('td');
					td.innerHTML = day.date;
					if (day.date === curDate) {
						td.className = "f_current";
					}
					if (day.unactive) {
						td.className = "another_month";
					} else {
						td.setAttribute('data-date', day.date);
						td.setAttribute('data-command', 'set-date');
					}
					tr.appendChild(td);
				}
				tabelEl.appendChild(tr);
			}
			if (m === 'from') {
				this.fromDateString.innerHTML = model.getText();
			} else {
				this.toDateString.innerHTML = model.getText();
			}
			return void 0;
		};

		Calendar.prototype.testDate = function(model) {
			var from, to;
			from = this.fromModel;
			to = this.toModel;
			if (from.date.getFullYear() === to.date.getFullYear() && from.date.getMonth() === to.date.getMonth()) {
				if (model === this.fromModel) {
					if (model.date.getDate() > to.date.getDate()) {
						model.setDate(to.date.getDate());
					}
				} else if (model === this.toModel) {
					if (model.date.getDate() < from.date.getDate()) {
						model.setDate(from.date.getDate());
					}
				}
			}
			return void 0;
		};

		Calendar.prototype.open = function(e) {
			this.fromModel.reSetDate(this.elFrom.value);
			this.toModel.reSetDate(this.elTo.value);
			return this.elView.style.display = 'block';
		};

		Calendar.prototype.close = function(e) {
			return this.elView.style.display = 'none';
		};

		Calendar.prototype.selectValues = function(e) {
			this.elFrom.value = this.fromModel.getText();
			this.elTo.value = this.toModel.getText();
			this.elFrom.form.submit();
			return this.close();
		};

		Calendar.prototype.changeMonth = function(e, model, view) {
			var command, date, from, src, to;
			e = e || event;
			src = e.target || e.srcElement;
			command = src.getAttribute('data-command');
			if (command) {
				events.stopDefault(e);
				if (command === 'next-month') {
					if (model === this.fromModel) {
						from = model;
						to = this.toModel;
						if (from.date.getTime() < to.date.getTime() && (from.date.getFullYear() < to.date.getFullYear() || from.date.getMonth() < to.date.getMonth())) {
							model.nextMonth();
						}
					} else if (model === this.toModel) {
						model.nextMonth();
					}
					this.testDate(model);
				}
				if (command === 'prev-month') {
					if (model === this.toModel) {
						from = this.fromModel;
						to = this.toModel;
						if (to.date.getTime() > from.date.getTime() && (to.date.getFullYear() > from.date.getFullYear() || to.date.getMonth() > from.date.getMonth())) {
							model.prevMonth();
						}
					} else if (model === this.fromModel) {
						model.prevMonth();
					}
					this.testDate(model);
				}
				if (command === 'set-date') {
					date = parseInt(src.getAttribute('data-date'));
					if (date) {
						from = this.fromModel;
						to = this.toModel;
						if (from.date.getFullYear() === to.date.getFullYear() && from.date.getMonth() === to.date.getMonth()) {
							if (model === this.fromModel) {
								if (date <= to.date.getDate()) {
									model.setDate(date);
								}
							} else if (model === this.toModel) {
								if (date >= from.date.getDate()) {
									model.setDate(date);
								}
							}
						} else {
							model.setDate(parseInt(date));
						}
					}
				}
				if (e.stopPropagation) {
					e.stopPropagation();
				} else {
					e.returnValue = false;
				}
				return false;
			}
		};

		Calendar.prototype.setHandlers = function(model, view) {
			return events.addListener('click', view, this.changeMonth, this, model, view);
		};

		return Calendar;

	})();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	var ButtonsView, Controller, Model, doc, dom, events, lpjl, utils, win,
		__hasProp = {}.hasOwnProperty;

	win = this;

	doc = win.document;

	lpjl = win.LPJL;

	dom = lpjl.use("dom");

	events = lpjl.use("events");

	utils = lpjl.use("utils");

	Model = (function() {
		function Model(elements, multiple) {
			this.multiple = multiple;
			this.listeners = {};
			this.reinit(elements);
		}

		Model.prototype.reinit = function(elements, quite) {
			var key, value;
			this.data = {};
			this.selected = [];
			for (key in elements) {
				if (!__hasProp.call(elements, key)) continue;
				value = elements[key];
				this.data[key] = value.text;
				if (value.selected) {
					this.selected.push(key);
				}
			}
			if (!quite) {
				return this.changed('ALL');
			}
		};

		Model.prototype.getSelected = function(key) {
			var el, _i, _len, _ref;
			_ref = this.selected;
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				el = _ref[_i];
				if (el === key) {
					return _i;
				}
			}
			return -1;
		};

		Model.prototype.isSelected = function(key) {
			if (this.selected.indexOf) {
				return this.selected.indexOf(key);
			} else {
				return this.getSelected(key);
			}
		};

		Model.prototype.listen = function(param, callback) {
			this.listeners[param] = this.listeners[param] || [];
			if (typeof callback === 'function') {
				this.listeners[param].push(callback);
			}
		};

		/*
			Снять слушателя с события
		*/


		Model.prototype.detach = function(param, callback) {
			var callbacks, cb, _i, _len;
			if (typeof this.listeners[param] !== 'undefined') {
				callbacks = this.listeners[param];
				for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
					cb = callbacks[_i];
					if (cb === callback) {
						callbacks.splice(_i, 1);
						return true;
					}
				}
			}
			return false;
		};

		Model.prototype.changed = function(type) {
			var args, callbacks, cb, slice, _i, _len;
			slice = Array.prototype.slice;
			args = slice.call(arguments, 1);
			if (typeof this.listeners[type] !== 'undefined') {
				callbacks = this.listeners[type];
				for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
					cb = callbacks[_i];
					if (typeof cb === 'function') {
						cb.apply(win, args);
					}
				}
			}
			return void 0;
		};

		Model.prototype.select = function(key) {
			var changed;
			if (typeof this.data[key] === 'undefined') {
				return;
			}
			changed = false;
			if (this.multiple) {
				if (this.isSelected(key === -1)) {
					this.selected.push(key);
					changed = true;
				}
			} else {
				if (this.selected[0] !== key) {
					this.selected[0] = key;
					changed = true;
				}
			}
			if (changed) {
				return this.changed('SELECTED', key);
			}
		};

		Model.prototype.unselect = function(key) {
			var idx;
			if (typeof this.data[key] === 'undefined') {
				return;
			}
			idx = this.isSelected(key);
			if (idx !== -1) {
				this.selected.splice(idx, 1);
				return this.changed('SELECTED', key);
			}
		};

		return Model;

	})();

	ButtonsView = (function() {
		function ButtonsView(el) {
			this.root = el;
		}

		ButtonsView.prototype.render = function(data, selected) {
			var button, el, first, key, span, value, _i, _len;
			this.root.innerHTML = '';
			first = true;
			for (key in data) {
				if (!__hasProp.call(data, key)) continue;
				value = data[key];
				button = doc.createElement('div');
				dom.addClass(button, 'button');
				span = doc.createElement('span');
				span.innerHTML = value;
				if (first) {
					dom.addClass(button, 'first');
					first = false;
				}
				button.appendChild(span);
				button.setAttribute('data-value', key);
				for (_i = 0, _len = selected.length; _i < _len; _i++) {
					el = selected[_i];
					if (el === key) {
						dom.addClass(button, 'selected');
						break;
					}
				}
				this.root.appendChild(button);
			}
			return dom.addClass(button, 'last');
		};

		return ButtonsView;

	})();

	Controller = (function() {
		function Controller(selectElement) {
			var data;
			this.select = selectElement;
			this.multiple = this.select.multiple;
			data = this.getData();
			this.model = new Model(data, this.multiple);
			this.custElement = doc.createElement('div');
			this.view = new ButtonsView(this.custElement);
			this.select.style.display = 'none';
			dom.insertAfter(this.select, this.custElement);
			this.view.render(this.model.data, this.model.selected);
			this.setHandlers();
		}

		Controller.prototype.setHandlers = function() {
			events.addListener('click', this.custElement, this.actions.customClick, this);
			events.addListener('change', this.select, this.actions.selectChanged, this);
			this.model.listen('SELECTED', events.proxy(this.actions.changeSelect, this));
			return this.model.listen('SELECTED', events.proxy(this.actions.changeView, this));
		};

		Controller.prototype.getData = function() {
			var data, option, _i, _len, _ref;
			data = {};
			_ref = this.select.options;
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				option = _ref[_i];
				if (option.value) {
					data[option.value] = {
						text: option.innerHTML,
						selected: option.selected
					};
				}
			}
			return data;
		};

		Controller.prototype.actions = {
			customClick: function(e) {
				var idx, src, target, value;
				e = e || event;
				src = e.target || e.srcElement;
				target = null;
				while (src !== this.custElement || src !== doc) {
					value = src.getAttribute('data-value');
					if (value) {
						target = src;
						break;
					} else {
						src = src.parentNode;
					}
				}
				if (target === null) {
					return;
				}
				idx = this.model.isSelected(value);
				if (this.multiple && idx >= 0) {
					this.model.unselect(value);
				}
				if (-1 === idx) {
					return this.model.select(value);
				}
			},
			selectChanged: function(e) {
				var data;
				e = e || event;
				data = this.getData();
				return this.model.reinit(data);
			},
			changeSelect: function(key) {
				var option, val, _i, _len, _ref;
				_ref = this.select.options;
				for (_i = 0, _len = _ref.length; _i < _len; _i++) {
					option = _ref[_i];
					val = option.value;
					if (this.model.isSelected(val) !== -1) {
						option.selected = true;
					} else {
						option.selected = false;
					}
				}
				return setTimeout(events.proxy(function() {
					return events.triggerEvent(this.select, 'change');
				}, this), 0);
			},
			changeView: function(key) {
				return this.view.render(this.model.data, this.model.selected);
			}
		};

		return Controller;

	})();

	lpjl.SelectButtons = Controller;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var Controller, Element, Model, Observeble, View, doc, dom, events, lpjl, win;

	win = this;

	doc = this.document;

	lpjl = this.LPJL;

	dom = lpjl.use('dom');

	events = lpjl.use('events');

	Element = (function() {
		function Element(name, code) {
			this.name = name;
			this.code = code;
			void 0;
		}

		return Element;

	})();

	Observeble = (function() {
		function Observeble(ids) {
			this.listeners = {};
			this.getId = function() {
				ids = ids || 0;
				return ids += 1;
			};
		}

		Observeble.prototype.listen = function(event, cb) {
			var id;
			if (typeof cb !== 'function') {
				return;
			}
			if (!this.listeners[event]) {
				this.listeners[event] = [];
			}
			id = this.getId();
			this.listeners[event].push({
				id: id,
				cb: cb
			});
			return id;
		};

		Observeble.prototype.detach = function(event, id) {
			var handler, _i, _len, _ref;
			if (typeof this.listeners[event] !== 'function') {
				return;
			}
			_ref = this.listeners[event];
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				handler = _ref[_i];
				if (handler.id === id) {
					this.listeners[event].splice(_i, 1);
					break;
				}
			}
			return void 0;
		};

		Observeble.prototype.publish = function(event, arg) {
			var handler, _i, _len, _ref;
			if (!this.listeners[event]) {
				return;
			}
			_ref = this.listeners[event];
			for (_i = 0, _len = _ref.length; _i < _len; _i++) {
				handler = _ref[_i];
				handler.cb.apply(null, [event, arg]);
			}
			return void 0;
		};

		return Observeble;

	})();

	Model = (function() {
		function Model(cfg) {
			this.elements = [];
			this.cfg = cfg;
			this.observer = new Observeble(0);
		}

		Model.prototype.add = function(el) {
			this.elements.push(el);
			return this.observer.publish('added', this.elements);
		};

		Model.prototype.remove = function(pos) {
			if (pos >= 0 && pos < this.elements.length) {
				this.elements.splice(pos, 1);
				this.observer.publish('removed', this.elements);
			}
			return void 0;
		};

		Model.prototype.get = function(pos) {
			if (pos >= 0 && pos < this.elements.length) {
				return this.elements[pos];
			}
			return null;
		};

		Model.prototype.stepUp = function(pos) {
			var el;
			if (pos > 0 && pos < this.elements.length) {
				el = this.elements.splice(pos, 1)[0];
				this.elements.splice(pos - 1, 0, el);
				this.observer.publish('up', this.elements);
			}
			return void 0;
		};

		Model.prototype.stepDown = function(pos) {
			var el;
			if (pos >= 0 && pos < (this.elements.length - 1)) {
				el = this.elements.splice(pos, 1)[0];
				pos += 1;
				if (pos === this.elements.length) {
					this.elements.push(el);
				} else {
					this.elements.splice(pos, 0, el);
				}
				this.observer.publish('down', this.elements);
			}
			return void 0;
		};

		Model.prototype.listen = function(event, cb) {
			return this.observer.listen(event, cb);
		};

		Model.prototype.detach = function(event, id) {
			return this.observer.detach(event, id);
		};

		return Model;

	})();

	View = (function() {
		function View(el, cfg) {
			var elementClass, listClass;
			elementClass = cfg.elementClass || '';
			listClass = cfg.listClass || '';
			if (el && el.tagName) {
				this.sourceElement = el;
			} else {
				this.sourceElement = doc.createElement('select');
			}
			this.sourceElement.multiple = true;
			this.element = doc.createElement('div');
			this.list = doc.createElement('ul');
			this.element.appendChild(this.list);
			dom.addClass(this.element, 'lpjl-reach-multiselect');
			dom.addClass(this.element, elementClass);
			dom.addClass(this.list, listClass);
			dom.insertAfter(this.sourceElement, this.element);
			this.sourceElement.style.display = 'none';
		}

		View.prototype.createElement = function(el, pos, length) {
			var buttonDel, buttonDown, buttonUp, container, label;
			container = doc.createElement('li');
			label = doc.createElement('div');
			label.innerHTML = el.name;
			label.className = 'fl';
			container.appendChild(label);
			if (pos !== length - 1) {
				buttonDown = doc.createElement('button');
				buttonDown.className = 'item_down';
				buttonDown.setAttribute('data-action', 'down');
				container.appendChild(buttonDown);
			}
			if (pos !== 0) {
				buttonUp = doc.createElement('button');
				buttonUp.className = 'item_up';
				buttonUp.setAttribute('data-action', 'up');
				container.appendChild(buttonUp);
			}
			buttonDel = doc.createElement('button');
			buttonDel.className = 'item_del';
			buttonDel.setAttribute('data-action', 'delete');
			container.appendChild(buttonDel);
			return container;
		};

		View.prototype.createOption = function(el) {
			var op;
			op = doc.createElement('option');
			op.innerHTML = el.name;
			op.value = el.code;
			op.selected = true;
			return op;
		};

		View.prototype.render = function(event, elems) {
			var el, length, li, op, scrollTop, _i, _len;
			scrollTop = this.element.scrollTop;
			this.list.innerHTML = '';
			this.sourceElement.innerHTML = '';
			length = elems.length;
			for (_i = 0, _len = elems.length; _i < _len; _i++) {
				el = elems[_i];
				li = this.createElement(el, _i, length);
				this.list.appendChild(li);
				op = this.createOption(el);
				this.sourceElement.appendChild(op);
			}
			switch (event) {
				case 'added':
					return this.element.scrollTop = this.element.scrollHeight;
				case 'up':
					return this.element.scrollTop = scrollTop - li.scrollHeight;
				case 'down':
					return this.element.scrollTop = scrollTop + li.scrollHeight;
			}
		};

		View.prototype.getElemPos = function(el) {
			var elem, elems, _i, _len;
			elems = dom.getChildNodes(this.list);
			for (_i = 0, _len = elems.length; _i < _len; _i++) {
				elem = elems[_i];
				if (elem === el) {
					return _i;
				}
			}
			return -1;
		};

		return View;

	})();

	Controller = (function() {
		function Controller(el, cfg) {
			this.model = new Model();
			this.view = new View(el, cfg);
			this.setObserve();
			events.addListener('click', this.view.list, this.onClick, this);
		}

		Controller.prototype.setObserve = function() {
			this.model.listen('added', events.proxy(this.view.render, this.view));
			this.model.listen('removed', events.proxy(this.view.render, this.view));
			this.model.listen('up', events.proxy(this.view.render, this.view));
			return this.model.listen('down', events.proxy(this.view.render, this.view));
		};

		Controller.prototype.addItem = function(el) {
			var elem;
			elem = new Element(el.name, el.code);
			return this.model.add(elem);
		};

		Controller.prototype.onDelete = function(pos) {
			return this.model.remove(pos);
		};

		Controller.prototype.onClickUp = function(pos) {
			return this.model.stepUp(pos);
		};

		Controller.prototype.onClickDown = function(pos) {
			return this.model.stepDown(pos);
		};

		Controller.prototype.onClick = function(e) {
			var command, el, pos, src;
			events.stopDefault(e);
			if (e.stopPropagation) {
				e.stopPropagation();
			} else {
				e.returnValue = false;
			}
			src = e.target || e.srcElement;
			command = src.getAttribute('data-action');
			if (command) {
				el = src.parentNode;
				pos = this.view.getElemPos(el);
				switch (command) {
					case 'delete':
						return this.onDelete(pos);
					case 'up':
						return this.onClickUp(pos);
					case 'down':
						return this.onClickDown(pos);
				}
			}
		};

		return Controller;

	})();

	lpjl.XReachMultiSelect = Controller;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
	'use strict';
	var InputFile, doc, dom, events, lpjl, utils;

	lpjl = this.LPJL;

	doc = this.document;

	dom = lpjl.use('dom');

	events = lpjl.use('events');

	utils = lpjl.use('utils');

	InputFile = (function() {
		function InputFile(el, params) {
			var buttonText, className, name;
			if (!el || el.type !== 'file') {
				return;
			}
			this.src = el;
			name = this.src.name;
			className = params != null ? params.className : void 0;
			buttonText = params != null ? params.buttonText : void 0;
			this.container = doc.createElement('div');
			this.button = doc.createElement('div');
			this.label = doc.createElement('div');
			var lb = doc.createElement('div');
			lb.appendChild(this.label);

			this.button.innerHTML = buttonText;
			this.container.appendChild(this.button);
			this.container.appendChild(lb);
			if (className) {
				dom.addClass(this.container, className);
				dom.addClass(this.button, className + '-button');
				dom.addClass(lb, className + '-label');
			}
			dom.insertAfter(this.src, this.container);
			this.src.style.left = '-99999px';
			this.src.style.width = '0px';
			this.src.style.height = '0px';
			this.src.style.position = 'absolute';
			events.addListener('click', this.button, this.handlers.chooseFile, this);
			events.addListener('change', this.src, this.handlers.onChange, this);
		}

		InputFile.prototype.handlers = {
			chooseFile: function(e) {
				return this.src.click();
			},
			onChange: function(e) {
				return this.label.innerHTML = this.src.value.split(/(\\|\/)/g).pop();
			}
		};

		return InputFile;

	})();

	lpjl.InputFile = InputFile;

}).call(this);
